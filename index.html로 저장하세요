<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>나만의 스마트 뽀모도로 스터디 플래너</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/a1d5203798.js" crossorigin="anonymous"></script>
    <link rel="manifest" href="/manifest.json">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="스마트 플래너">
    <link rel="apple-touch-icon" href="/icons/icon-192x192.png">
    <style>
        /* 기본 스타일 및 다크 모드 */
        body {
            font-family: 'Noto Sans KR', sans-serif;
            background-color: #1a1a1a;
            color: #e0e0e0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
            line-height: 1.6;
        }

        h1 {
            color: #6a9cff;
            text-align: center;
            margin-bottom: 25px;
            font-size: 2.5em;
        }

        /* 상단 메뉴 버튼 그룹 */
        .top-menu-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
            justify-content: center;
        }
        .top-menu-buttons button {
            background-color: #34495e;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }
        .top-menu-buttons button:hover {
            background-color: #2c3e50;
            transform: translateY(-2px);
        }
        .top-menu-buttons button:active {
            transform: translateY(1px);
        }
        .top-menu-buttons button.active {
            background-color: #6a9cff;
            box-shadow: 0 4px 15px rgba(106, 156, 255, 0.4);
        }

        .main-content-wrapper {
            background-color: #2c2c2c;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
            padding: 30px;
            width: 100%;
            max-width: 1200px;
            min-height: 600px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
        }

        /* 각 섹션 스타일 */
        .content-section {
            width: 100%;
            padding: 30px;
            box-sizing: border-box;
            background-color: #2c2c2c;
            display: none; /* 기본적으로 숨김 */
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            overflow-y: auto;
            border-radius: 15px;
        }
        .content-section.active {
            display: flex; /* 활성화되면 보이도록 */
        }

        h2 {
            color: #6a9cff;
            text-align: center;
            margin-bottom: 20px;
            font-size: 2em;
        }

        /* 뽀모도로 타이머 섹션 */
        #pomodoroSection {
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        /* 원형 타이머 스타일 */
        .timer-circle-container {
            position: relative;
            width: 250px; /* 원의 크기 */
            height: 250px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .timer-circle-background {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background-color: #3a3a3a; /* 원의 배경색 */
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);
        }

        .timer-circle-progress {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            transform: rotate(-90deg); /* 12시 방향에서 시작 */
            background: conic-gradient(#e74c3c 100%, transparent 100%); /* 빨간색 채우기 */
            transition: background 0.5s linear; /* 색상 변화 부드럽게 */
        }

        .timer-circle-text {
            position: relative;
            font-size: 3.5em; /* 텍스트 크기 */
            font-weight: bold;
            color: #e0e0e0;
            z-index: 10;
            text-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
            letter-spacing: 1px;
        }


        .timer-status {
            font-size: 1.5em;
            color: #a0a0a0;
            margin-bottom: 25px;
            animation: fadeIn 0.8s ease-in-out;
        }
        .control-buttons button {
            background-color: #6a9cff;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            margin: 0 8px;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
        }
        .control-buttons button:hover {
            background-color: #537ec7;
            transform: translateY(-2px);
        }
        .control-buttons button:active {
            transform: translateY(1px);
        }
        .control-buttons button:disabled {
            background-color: #555;
            cursor: not-allowed;
            opacity: 0.7;
            transform: none;
            box-shadow: none;
        }
        .session-info {
            margin-top: 25px;
            font-size: 1.1em;
            color: #b0b0b0;
            text-align: center;
        }
        .session-info span {
            color: #6a9cff;
            font-weight: bold;
        }
        .subject-input {
            width: calc(100% - 20px);
            max-width: 300px;
            padding: 10px;
            margin-top: 20px;
            border: 1px solid #555;
            background-color: #2a2a2a;
            color: #e0e0e0;
            border-radius: 5px;
            font-size: 1em;
            text-align: center;
        }
        .subject-input::placeholder {
            color: #888;
        }

        /* 공부 기록 섹션 (뽀모도로 섹션 내부에 위치) */
        .record-container {
            width: 100%;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px dashed #4a4a4a;
        }
        .record-container h3 {
            margin-top: 0;
            margin-bottom: 20px;
            color: #9c6aff;
            text-align: center;
        }
        #studyRecordsList {
            list-style: none;
            padding: 0;
            margin: 0;
            max-height: 250px;
            overflow-y: auto;
            background-color: #3a3a3a;
            border-radius: 8px;
            padding: 15px;
        }
        #studyRecordsList li {
            background-color: #4a4a4a;
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 8px;
            font-size: 0.9em;
            display: flex;
            justify-content: space-between;
            align-items: center;
            word-break: break-word;
        }
        #studyRecordsList li span.record-subject {
            font-weight: bold;
            color: #9c6aff;
        }
        #studyRecordsList li span.record-time {
            font-size: 0.8em;
            color: #b0b0b0;
            margin-left: 10px;
            white-space: nowrap;
        }
        #studyRecordsList li:last-child { margin-bottom: 0; }
        #studyRecordsList li.no-records {
            text-align: center;
            color: #888;
            padding: 20px;
        }

        /* 스케줄/분량 입력 섹션 스타일 */
        .input-form-group {
            background-color: #3a3a3a;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
            width: 100%;
            max-width: 700px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .input-form-group h3 {
            color: #6aff9c;
            margin-top: 0;
            margin-bottom: 20px;
            text-align: center;
            font-size: 1.6em;
        }
        .form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
            justify-content: center;
        }
        .form-row label {
            color: #e0e0e0;
            font-weight: bold;
            flex-basis: 80px;
            text-align: right;
            padding-right: 10px;
        }
        .form-row input[type="text"],
        .form-row input[type="time"],
        .form-row input[type="number"],
        .form-row select {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #555;
            background-color: #2a2a2a;
            color: #e0e0e0;
            border-radius: 5px;
            font-size: 1em;
            max-width: 200px;
        }
        .form-row input[type="number"] {
            max-width: 100px;
            text-align: center;
        }
        .form-row select {
            max-width: 150px;
        }
        .form-row button {
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            margin-left: 10px;
            white-space: nowrap;
        }
        .form-row button:hover {
            background-color: #27ae60;
            transform: translateY(-1px);
        }

        .schedule-list-container, .study-plan-list-container {
            background-color: #3a3a3a;
            border-radius: 8px;
            padding: 15px;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #4a4a4a;
        }
        .schedule-list-container ul, .study-plan-list-container ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .schedule-list-container li, .study-plan-list-container li {
            background-color: #4a4a4a;
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 8px;
            font-size: 0.95em;
            display: flex;
            justify-content: space-between;
            align-items: center;
            word-break: break-word;
        }
        .schedule-list-container li:last-child {
            margin-bottom: 0;
        }
        .list-item-content {
            flex-grow: 1;
        }
        .list-item-content strong {
            color: #6a9cff;
        }
        .list-item-content span {
            color: #b0b0b0;
            font-size: 0.85em;
            margin-left: 10px;
        }
        .list-delete-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 0.8em;
            margin-left: 15px;
            transition: background-color 0.3s ease;
        }
        .list-delete-btn:hover {
            background-color: #c0392b;
        }
        .no-items {
            text-align: center;
            color: #888;
            padding: 20px;
        }

        /* Generated Planner Section */
        #generatedPlannerSection {
            max-width: 100%;
            width: 100%;
        }
        #generatedPlannerSection h3 {
            color: #6aff9c;
            text-align: center;
            margin-bottom: 20px;
        }
        .planner-output-section {
            background-color: #3a3a3a;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            padding: 25px;
            margin-bottom: 20px;
            width: 100%;
            overflow-x: auto;
        }
        .planner-output-section h3 {
            color: #9c6aff;
            margin-top: 0;
            margin-bottom: 20px;
            text-align: center;
            font-size: 1.6em;
        }
        .generated-output-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .generated-output-list li {
            background-color: #4a4a4a;
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 8px;
            font-size: 0.95em;
            display: flex;
            justify-content: space-between;
            align-items: center;
            word-break: break-word;
        }
        .generated-output-list li:last-child { margin-bottom: 0; }
        .generated-output-list li strong {
            color: #6aff9c;
        }
        .generated-output-list li span {
            color: #b0b0b0;
            font-size: 0.85em;
        }
        .no-generated-data {
            text-align: center;
            color: #888;
            padding: 50px;
            font-size: 1.1em;
        }

        /* 경고 메시지 스타일 */
        .warning-message {
            color: #ff6a6a;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            background-color: #5a2a2a;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            font-size: 1.2em;
        }

        /* AI 플래너 테이블 스타일 */
        #aiPlannerTable {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #2a2a2a;
        }
        #aiPlannerTable th, #aiPlannerTable td {
            border: 1px solid #444;
            padding: 8px;
            text-align: center;
            font-size: 0.85em;
            vertical-align: top;
            min-width: 80px;
        }
        #aiPlannerTable th {
            background-color: #3e3e3e;
            color: #fff;
            position: sticky;
            top: 0;
            z-index: 2;
        }
        #aiPlannerTable td {
            background-color: #2c2c2c;
            color: #e0e0e0;
        }
        #aiPlannerTable td.time-label {
            background-color: #3e3e3e;
            color: #fff;
            font-weight: bold;
            position: sticky;
            left: 0;
            z-index: 1;
        }
        /* AI 플래너 셀 색상 */
        #aiPlannerTable td.sleep-time { background-color: #5a3d7d; color: #fff; }
        #aiPlannerTable td.academy-time { background-color: #E74C3C; color: #fff; }
        #aiPlannerTable td.meal-time { background-color: #3d7d5a; color: #fff; }
        /* 개인 공부 과목별 색상 (JS에서 추가될 예정) */
        #aiPlannerTable td.study-color-0 { background-color: #2ecc71; color: #fff; }
        #aiPlannerTable td.study-color-1 { background-color: #3498db; color: #fff; }
        #aiPlannerTable td.study-color-2 { background-color: #9b59b6; color: #fff; }
        #aiPlannerTable td.study-color-3 { background-color: #f1c40f; color: #333; }
        #aiPlannerTable td.study-color-4 { background-color: #e67e22; color: #fff; }
        #aiPlannerTable td.study-color-5 { background-color: #1abc9c; color: #fff; }
        #aiPlannerTable td.study-color-6 { background-color: #d35400; color: #fff; }
        #aiPlannerTable td.study-color-7 { background-color: #c0392b; color: #fff; }
        #aiPlannerTable td.pomodoro-break { background-color: #607D8B; color: #eee; font-size: 0.75em;}
        /* 공부 완료 표시 */
        #aiPlannerTable td.study-completed {
            background-color: #6aff9c !important;
            color: #1a1a1a !important;
            font-weight: bold;
            position: relative;
        }
        #aiPlannerTable td.study-completed::before {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5em;
            opacity: 0.7;
        }

        /* 약점 과목 선택 및 문제집 추천 섹션 */
        #recommendationSection {
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 50px;
            text-align: center;
        }
        .input-group {
            background-color: #3a3a3a;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
            width: 100%;
            max-width: 700px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            gap: 15px;
            text-align: left;
        }
        .input-group h3 {
            color: #6aff9c;
            margin-bottom: 10px;
            text-align: center;
        }
        .form-row {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        .form-row label {
            font-weight: bold;
        }
        .form-row select, .form-row input[type="radio"], .form-row input[type="checkbox"] {
            margin-right: 5px;
        }
        .form-row select {
            padding: 8px;
            background-color: #2a2a2a;
            color: #e0e0e0;
            border: 1px solid #555;
            border-radius: 5px;
        }
        .radio-group, .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
        }
        .radio-group input[type="radio"], .checkbox-group input[type="checkbox"] {
            display: none;
        }
        .radio-group label, .checkbox-group label {
            background-color: #4a4a4a;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            border: 2px solid #555;
            transition: background-color 0.3s, border-color 0.3s;
        }
        .radio-group input[type="radio"]:checked + label, .checkbox-group input[type="checkbox"]:checked + label {
            background-color: #6a9cff;
            border-color: #6a9cff;
            color: white;
            font-weight: bold;
        }
        #recommendationResults {
            width: 100%;
            text-align: left;
            margin-top: 30px;
        }
        #recommendationResults h3 {
            color: #6aff9c;
            margin-bottom: 15px;
            text-align: center;
        }
        #recommendationResults ul {
            list-style: none;
            padding: 0;
            margin: 0;
            background-color: #3a3a3a;
            border-radius: 10px;
            padding: 20px;
        }
        #recommendationResults li {
            background-color: #4a4a4a;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
        }
        #recommendationResults li strong {
            color: #9c6aff;
        }
        #recommendationResults li span {
            color: #b0b0b0;
            font-size: 0.85em;
        }
        #generateRecommendationBtn, #generatePlannerButton {
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 300px;
            margin-top: 20px;
        }
        #generateRecommendationBtn:hover, #generatePlannerButton:hover {
            background-color: #27ae60;
            transform: translateY(-2px);
        }

        /* 배지 섹션 */
        #badgesSection {
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        #badgeDisplay {
            font-size: 2em;
            font-weight: bold;
            color: #f1c40f;
            margin: 20px 0;
            text-align: center;
        }
        .redeem-buttons button {
            background-color: #e67e22;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 15px 30px;
            font-size: 1.2em;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }
        .redeem-buttons button:hover {
            background-color: #d35400;
        }
        .redeem-buttons button:disabled {
            background-color: #555;
            cursor: not-allowed;
            opacity: 0.7;
        }
        .redeem-message {
            margin-top: 15px;
            font-size: 1em;
            color: #6aff9c;
            text-align: center;
        }

        footer {
            margin-top: auto;
            padding: 20px;
            color: #888;
            font-size: 0.85em;
            text-align: center;
            width: 100%;
        }

        /* 애니메이션 */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* 미디어 쿼리 (모바일 반응형) */
        @media (max-width: 768px) {
            h1 { font-size: 2em; margin-bottom: 20px; }
            .top-menu-buttons {
                flex-direction: column;
                gap: 10px;
                margin-bottom: 20px;
            }
            .top-menu-buttons button {
                padding: 10px 20px;
                font-size: 1em;
            }
            .main-content-wrapper {
                padding: 20px;
                min-height: 500px;
            }
            .content-section {
                padding: 20px;
            }
            h2 { font-size: 1.8em; }
            /* 뽀모도로 원형 타이머 모바일 */
            .timer-circle-container {
                width: 200px;
                height: 200px;
            }
            .timer-circle-text {
                font-size: 3em;
            }

            .timer-status { font-size: 1.2em; }
            .control-buttons button {
                padding: 10px 15px;
                font-size: 0.9em;
            }
            .subject-input {
                max-width: 250px;
            }
            .record-container {
                margin-top: 20px;
            }
            #studyRecordsList {
                padding: 10px;
                max-height: 200px;
            }
            #studyRecordsList li {
                padding: 8px 10px;
                font-size: 0.85em;
            }

            /* 새로운 입력 섹션 모바일 스타일 */
            .input-form-group, .input-group {
                padding: 15px;
                gap: 10px;
            }
            .input-form-group h3, .input-group h3 {
                font-size: 1.4em;
            }
            .form-row {
                flex-direction: column;
                align-items: stretch;
                gap: 8px;
            }
            .form-row label {
                text-align: left;
                padding-right: 0;
                flex-basis: auto;
                width: 100%;
            }
            .form-row input[type="text"],
            .form-row input[type="time"],
            .form-row input[type="number"],
            .form-row select {
                width: 100%;
                max-width: none;
            }
            .form-row button {
                width: 100%;
                margin-left: 0;
            }
            .schedule-list-container li, .study-plan-list-container li {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
            .list-item-content span {
                margin-left: 0;
            }
            .list-delete-btn {
                width: 100%;
                margin-left: 0;
            }
            #aiPlannerTable th, #aiPlannerTable td {
                font-size: 0.7em;
                padding: 5px;
                min-width: 60px;
            }
            #aiPlannerTable td.time-label {
                min-width: 50px;
            }
            #generateRecommendationBtn, #generatePlannerButton {
                max-width: 100%;
            }
        }
    </style>
</head>
<body>
    <h1>나만의 스마트 뽀모도로 스터디 플래너</h1>

    <div class="top-menu-buttons">
        <button id="btnPomodoro" class="active" data-target="pomodoroSection"><i class="fas fa-clock"></i> 뽀모도로 타이머</button>
        <button id="btnPlannerInput" data-target="plannerInputSection"><i class="fas fa-edit"></i> 학원/공부 입력</button>
        <button id="btnGeneratedPlanner" data-target="generatedPlannerSection"><i class="fas fa-calendar-alt"></i> 플래너 보기</button>
        <button id="btnRecommendation" data-target="recommendationSection"><i class="fas fa-book"></i> 문제집 추천</button>
        <button id="btnBadges" data-target="badgesSection"><i class="fas fa-trophy"></i> 배지 관리</button>
    </div>

    <div class="main-content-wrapper">
        <section id="pomodoroSection" class="content-section active">
            <h2>뽀모도로 스터디 타이머</h2>
            <div class="timer-circle-container">
                <div class="timer-circle-background"></div>
                <div class="timer-circle-progress" id="timerProgressCircle"></div>
                <div class="timer-circle-text" id="timer">25:00</div>
            </div>
            <div class="timer-status" id="timerStatus">공부 시간</div>
            <input type="text" id="subjectInput" class="subject-input" placeholder="무엇을 공부할까요? (예: 수학, 영어)"/>
            <div class="control-buttons">
                <button id="startButton">시작</button>
                <button id="pauseButton" disabled>일시정지</button>
                <button id="resetButton">초기화</button>
            </div>
            <div class="session-info">
                오늘 완료한 뽀모도로 세션: <span id="completedSessions">0</span>회
            </div>
            <div class="record-container">
                <h3>오늘의 공부 기록</h3>
                <ul id="studyRecordsList">
                    <li class="no-records">아직 공부 기록이 없습니다!</li>
                </ul>
            </div>
        </section>

        <section id="plannerInputSection" class="content-section">
            <h2>학원 및 주간 공부 분량 입력</h2>
            <div class="input-form-group">
                <h3><i class="fas fa-school"></i> 학원 스케줄 작성</h3>
                <div class="form-row">
                    <label for="academyNameInput">학원명:</label>
                    <input type="text" id="academyNameInput" placeholder="학원 이름 (예: 대성학원)">
                </div>
                <div class="form-row">
                    <label for="academyDaySelect">요일:</label>
                    <select id="academyDaySelect">
                        <option value="월">월요일</option>
                        <option value="화">화요일</option>
                        <option value="수">수요일</option>
                        <option value="목">목요일</option>
                        <option value="금">금요일</option>
                        <option value="토">토요일</option>
                        <option value="일">일요일</option>
                    </select>
                </div>
                <div class="form-row">
                    <label for="academyStartTimeInput">시작 시간:</label>
                    <input type="time" id="academyStartTimeInput" value="09:00">
                </div>
                <div class="form-row">
                    <label for="academyEndTimeInput">종료 시간:</label>
                    <input type="time" id="academyEndTimeInput" value="12:00">
                </div>
                <div class="form-row">
                    <button id="addAcademyScheduleBtn">학원 스케줄 추가</button>
                </div>
                <div class="schedule-list-container">
                    <h4>등록된 학원 스케줄</h4>
                    <ul id="academyScheduleList">
                        <li class="no-items">등록된 학원 스케줄이 없습니다.</li>
                    </ul>
                </div>
            </div>
            <div class="input-form-group">
                <h3><i class="fas fa-bed"></i> 수면 시간 입력</h3>
                <div class="form-row">
                    <label for="sleepStartTimeInput">취침 시간:</label>
                    <input type="time" id="sleepStartTimeInput" value="23:00" placeholder="예: 23:00 (밤 11시), 00:00 (자정)">
                </div>
                <div class="form-row">
                    <label for="sleepEndTimeInput">기상 시간:</label>
                    <input type="time" id="sleepEndTimeInput" value="07:00" placeholder="예: 07:00 (오전 7시), 12:00 (정오)">
                </div>
                <div class="form-row">
                    <button id="saveSleepTimeBtn">수면 시간 저장</button>
                </div>
                <div class="schedule-list-container">
                    <h4>설정된 수면 시간</h4>
                    <ul id="displaySleepTimeList">
                        <li class="no-items">설정된 수면 시간이 없습니다.</li>
                    </ul>
                </div>
            </div>
            <div class="input-form-group">
                <h3><i class="fas fa-book"></i> 주간 공부 분량 작성</h3>
                <div class="form-row">
                    <label for="studySubjectInput">과목명:</label>
                    <input type="text" id="studySubjectInput" placeholder="과목 (예: 국어, 영어)">
                </div>
                <div class="form-row">
                    <label for="studyWeeklyHoursInput">주간 목표:</label>
                    <input type="number" id="studyWeeklyHoursInput" min="0" value="5">
                    <span>시간</span>
                </div>
                <div class="form-row">
                    <button id="addStudyPlanBtn">주간 공부 분량 추가</button>
                </div>
                <div class="study-plan-list-container">
                    <h4>등록된 주간 공부 분량</h4>
                    <ul id="studyPlanList">
                        <li class="no-items">등록된 주간 공부 분량이 없습니다.</li>
                    </ul>
                </div>
            </div>
            <button id="generatePlannerButton">플래너 생성</button>
        </section>

        <section id="generatedPlannerSection" class="content-section">
            <h2>나의 주간 스케줄 및 공부 목표</h2>
            <div id="generatedPlannerOutput" class="planner-output-section">
                <div id="academyWarning" class="warning-message" style="display: none;"></div>
                <div id="learningRateInfo" style="text-align: center; margin-bottom: 20px;">
                    <p style="font-size: 1.2em; color: #6aff9c; font-weight: bold;">오늘의 학습률: <span id="dailyLearningRate">0%</span></p>
                    <p style="font-size: 1.2em; color: #f1c40f;">보유 배지: <span id="currentBadges">0</span>개</p>
                </div>
                <h3><i class="fas fa-calendar-alt"></i> 학원 스케줄 요약</h3>
                <ul id="displayAcademyScheduleList" class="generated-output-list">
                    <li class="no-generated-data">등록된 학원 스케줄이 없습니다.</li>
                </ul>
                <h3><i class="fas fa-book-open"></i> 주간 공부 목표 요약</h3>
                <ul id="displayStudyPlanList" class="generated-output-list">
                    <li class="no-generated-data">등록된 주간 공부 분량이 없습니다.</li>
                </ul>
                <h3><i class="fas fa-robot"></i> AI 추천 주간 스터디 플래너 (뽀모도로 기반)</h3>
                <div id="aiPlannerTableContainer">
                    <table id="aiPlannerTable">
                        <thead>
                            <tr>
                                <th>시간</th>
                                <th>월</th>
                                <th>화</th>
                                <th>수</th>
                                <th>목</th>
                                <th>금</th>
                                <th>토</th>
                                <th>일</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
                <p id="noAiPlannerData" class="no-generated-data" style="display: block;">
                    AI 추천 플래너를 생성하려면 학원 스케줄, 수면 시간, 주간 공부 분량을 입력해주세요.
                </p>
            </div>
        </section>

        <section id="recommendationSection" class="content-section">
            <h2>개인정보 입력 및 문제집 추천</h2>
            <div class="input-group">
                <div class="form-row">
                    <label>학생 유형 선택:</label>
                    <div class="radio-group" id="studentTypeRadioGroup">
                        <input type="radio" id="middleSchool" name="studentType" value="middleSchool" checked>
                        <label for="middleSchool">중학생</label>
                        <input type="radio" id="highSchool" name="studentType" value="highSchool">
                        <label for="highSchool">고등학생</label>
                    </div>
                </div>
                <div class="form-row">
                    <label for="gradeSelect">학년 선택:</label>
                    <select id="gradeSelect"></select>
                </div>
                <div class="form-row">
                    <label for="weakSubjectSelect">취약 과목 선택:</label>
                    <select id="weakSubjectSelect"></select>
                </div>
                <div class="form-row">
                    <label>취약 정도:</label>
                    <div class="radio-group" id="weaknessLevelRadioGroup">
                        <input type="radio" id="weaknessHigh" name="weaknessLevel" value="상">
                        <label for="weaknessHigh">상</label>
                        <input type="radio" id="weaknessMedium" name="weaknessLevel" value="중" checked>
                        <label for="weaknessMedium">중</label>
                        <input type="radio" id="weaknessLow" name="weaknessLevel" value="하">
                        <label for="weaknessLow">하</label>
                    </div>
                </div>
            </div>
            <button id="generateRecommendationBtn">문제집 추천받기</button>
            <div id="recommendationResults" class="planner-output-section" style="display: none;">
                <h3>맞춤형 문제집 추천 결과</h3>
                <ul id="recommendedWorkbooksList">
                    </ul>
            </div>
        </section>

        <section id="badgesSection" class="content-section">
            <h2>나의 배지 관리</h2>
            <div class="planner-output-section">
                <p style="font-size: 1.5em; text-align: center; color: #e0e0e0; margin-bottom: 20px;">현재 보유한 배지 수</p>
                <div id="badgeDisplay">0개</div>
                <div class="redeem-buttons" style="text-align: center;">
                    <button id="redeemButton" disabled>배지 5개 모으고 상품 받기</button>
                </div>
                <div id="redeemMessage" class="redeem-message"></div>
            </div>
        </section>
    </div>

    <footer>
        <p>&copy; 2024 스마트 뽀모도로 스터디 플래너. 모든 권리 보유.</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sections = document.querySelectorAll('.content-section');
            const menuButtons = document.querySelectorAll('.top-menu-buttons button');
            const localStorageKey = 'studyPlannerData';
            const WEEKDAYS = ['일', '월', '화', '수', '목', '금', '토'];

            // DOM elements
            const timer = document.getElementById('timer');
            const timerStatus = document.getElementById('timerStatus');
            const startButton = document.getElementById('startButton');
            const pauseButton = document.getElementById('pauseButton');
            const resetButton = document.getElementById('resetButton');
            const subjectInput = document.getElementById('subjectInput');
            const completedSessionsSpan = document.getElementById('completedSessions');
            const timerProgressCircle = document.getElementById('timerProgressCircle');
            const studyRecordsList = document.getElementById('studyRecordsList');

            const academyNameInput = document.getElementById('academyNameInput');
            const academyDaySelect = document.getElementById('academyDaySelect');
            const academyStartTimeInput = document.getElementById('academyStartTimeInput');
            const academyEndTimeInput = document.getElementById('academyEndTimeInput');
            const addAcademyScheduleBtn = document.getElementById('addAcademyScheduleBtn');
            const academyScheduleList = document.getElementById('academyScheduleList');

            const sleepStartTimeInput = document.getElementById('sleepStartTimeInput');
            const sleepEndTimeInput = document.getElementById('sleepEndTimeInput');
            const saveSleepTimeBtn = document.getElementById('saveSleepTimeBtn');
            const displaySleepTimeList = document.getElementById('displaySleepTimeList');

            const studySubjectInput = document.getElementById('studySubjectInput');
            const studyWeeklyHoursInput = document.getElementById('studyWeeklyHoursInput');
            const addStudyPlanBtn = document.getElementById('addStudyPlanBtn');
            const studyPlanList = document.getElementById('studyPlanList');

            const displayAcademyScheduleList = document.getElementById('displayAcademyScheduleList');
            const displayStudyPlanList = document.getElementById('displayStudyPlanList');
            const aiPlannerTableBody = document.querySelector('#aiPlannerTable tbody');
            const noAiPlannerData = document.getElementById('noAiPlannerData');
            const generatePlannerButton = document.getElementById('generatePlannerButton');

            const dailyLearningRateSpan = document.getElementById('dailyLearningRate');
            const currentBadgesSpan = document.getElementById('currentBadges');
            const badgeDisplay = document.getElementById('badgeDisplay');
            const redeemButton = document.getElementById('redeemButton');
            const redeemMessage = document.getElementById('redeemMessage');

            const academyWarning = document.getElementById('academyWarning');

            // Recommendation section elements
            const studentTypeRadioGroup = document.getElementById('studentTypeRadioGroup');
            const gradeSelect = document.getElementById('gradeSelect');
            const weakSubjectSelect = document.getElementById('weakSubjectSelect');
            const weaknessLevelRadioGroup = document.getElementById('weaknessLevelRadioGroup');
            const generateRecommendationBtn = document.getElementById('generateRecommendationBtn');
            const recommendedWorkbooksList = document.getElementById('recommendedWorkbooksList');
            const recommendationResultsDiv = document.getElementById('recommendationResults');

            // Timer variables
            let timerId;
            let timeRemaining;
            let isPaused = false;
            let isStudyTime = true;
            let currentSession = 0;
            const STUDY_TIME = 25 * 60; // 25 minutes
            const SHORT_BREAK = 5 * 60;  // 5 minutes
            const LONG_BREAK = 15 * 60; // 15 minutes
            const SESSIONS_PER_LONG_BREAK = 4;

            // Data storage object
            let studyPlannerData = {
                userLevel: null,
                userGrade: null,
                weakSubject: null,
                weaknessLevel: null,
                completedSessions: 0,
                studyRecords: [],
                academySchedules: [],
                sleepTime: null,
                studyPlans: [],
                badges: 0,
                // AI 플래너 생성 결과 저장
                aiPlanner: {},
                // 실제로 완료한 공부 기록 (요일별, 시간별)
                completedStudyBlocks: { '월': [], '화': [], '수': [], '목': [], '금': [], '토': [], '일': [] },
                // 마지막으로 배지를 지급한 날짜
                lastBadgeDate: null
            };

            const defaultWorkbooks = {
                "중학교": {
                    "국어": {
                        "상": ["최상위 문제집 국어", "고난도 국어 문법 문제집"],
                        "중": ["숨마쿰라우데 국어 기본서", "문제 해결의 길잡이 국어"],
                        "하": ["우공비 국어", "개념원리 국어"]
                    },
                    "수학": {
                        "상": ["최상위 수학", "블랙라벨 수학"],
                        "중": ["RPM", "쎈(C)"],
                        "하": ["개념원리", "라이트쎈"]
                    },
                    "영어": {
                        "상": ["EBS 고난도 영어 문제집", "숨마쿰라우데 영어"],
                        "중": ["EBS 중학 영문법", "능률 보카"],
                        "하": ["천재교육 영어 교과서 문제집", "리딩튜터"]
                    },
                    "과학": {
                        "상": ["하이탑 과학", "최상위 과학"],
                        "중": ["오투 과학", "우공비 과학"],
                        "하": ["개념원리 과학", "개념유형 과학"]
                    },
                    "사회/역사": {
                        "상": ["숨마쿰라우데 사회/역사", "최상위 사회/역사"],
                        "중": ["오투 사회/역사", "하이라이트 사회/역사"],
                        "하": ["우공비 사회/역사", "개념원리 사회/역사"]
                    }
                },
                "고등학교": {
                    "국어": {
                        "상": ["마더텅 수능 기출 국어", "EBS 고난도 수능특강 국어"],
                        "중": ["숨마쿰라우데 국어 기본서", "자이스토리 국어"],
                        "하": ["개념원리 국어", "수능 개념완성 국어"]
                    },
                    "수학": {
                        "상": ["블랙라벨 수학", "최상위 수학"],
                        "중": ["정석 수학", "쎈(C)"],
                        "하": ["개념원리 수학", "라이트쎈"]
                    },
                    "영어": {
                        "상": ["자이스토리 수능 기출 영어", "고난도 수능특강 영어"],
                        "중": ["EBS 수능특강 영어", "능률 보카"],
                        "하": ["천일문 기본", "수능 개념완성 영어"]
                    },
                    "과학탐구": {
                        "상": ["하이탑 과학", "수능특강 고난도 과학"],
                        "중": ["오투 과학", "우공비 과학"],
                        "하": ["개념원리 과학", "개념유형 과학"]
                    },
                    "사회탐구": {
                        "상": ["숨마쿰라우데 사회탐구", "수능특강 고난도 사회"],
                        "중": ["자이스토리 사회탐구", "수능특강 사회탐구"],
                        "하": ["개념원리 사회탐구", "개념유형 사회탐구"]
                    }
                }
            };


            // 초기화
            function loadData() {
                const storedData = localStorage.getItem(localStorageKey);
                if (storedData) {
                    studyPlannerData = JSON.parse(storedData);
                }
                updateUIForDataState();
                checkAndAwardBadges(); // 앱 시작 시 배지 지급 확인
            }

            function saveData() {
                localStorage.setItem(localStorageKey, JSON.stringify(studyPlannerData));
            }

            function updateUIForDataState() {
                let initialSectionId = 'pomodoroSection';
                let initialButtonId = 'btnPomodoro';
                if (!studyPlannerData.userLevel || !studyPlannerData.userGrade) {
                    initialSectionId = 'recommendationSection';
                    initialButtonId = 'btnRecommendation';
                }
                const initialButton = document.getElementById(initialButtonId);
                showSection(initialSectionId, initialButton);

                // Update all other sections based on loaded data
                updatePomodoroUI();
                updatePlannerInputUI();
                updateGeneratedPlannerUI();
                updateBadgesUI();
                updateRecommendationUI();
            }

            // 수정된 showSection 함수
            function showSection(sectionId, clickedButton) {
                sections.forEach(section => {
                    section.classList.remove('active');
                    section.style.display = 'none'; // 명시적으로 숨기기
                });
                const targetSection = document.getElementById(sectionId);
                if (targetSection) {
                    targetSection.classList.add('active');
                    targetSection.style.display = 'flex'; // 명시적으로 보이기
                }

                menuButtons.forEach(button => {
                    button.classList.remove('active');
                });
                if (clickedButton) {
                    clickedButton.classList.add('active');
                }
                
                // GeneratedPlannerSection이 활성화될 때마다 플래너를 다시 생성
                if (sectionId === 'generatedPlannerSection') {
                    updateGeneratedPlannerUI();
                }
            }

            // 수정된 이벤트 리스너
            menuButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    const sectionId = e.currentTarget.dataset.target;
                    showSection(sectionId, e.currentTarget);
                });
            });


            // --- Pomodoro Timer Functions ---
            function updateTimerDisplay() {
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = timeRemaining % 60;
                timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                const totalTime = isStudyTime ? STUDY_TIME : (studyPlannerData.completedSessions % SESSIONS_PER_LONG_BREAK === 0 && studyPlannerData.completedSessions !== 0 ? LONG_BREAK : SHORT_BREAK);
                const progress = (timeRemaining / totalTime) * 100;
                timerProgressCircle.style.background = `conic-gradient(#e74c3c ${progress}%, transparent ${progress}%)`;
            }

            function startTimer() {
                if (timerId) clearInterval(timerId);
                isPaused = false;
                startButton.disabled = true;
                pauseButton.disabled = false;
                timerStatus.textContent = isStudyTime ? "공부 시간" : "휴식 시간";

                timerId = setInterval(() => {
                    if (timeRemaining <= 0) {
                        clearInterval(timerId);
                        handleTimerEnd();
                    } else {
                        timeRemaining--;
                        updateTimerDisplay();
                    }
                }, 1000);
            }

            function pauseTimer() {
                clearInterval(timerId);
                isPaused = true;
                startButton.disabled = false;
                pauseButton.disabled = true;
                timerStatus.textContent = "일시정지";
            }

            function resetTimer() {
                clearInterval(timerId);
                isPaused = false;
                isStudyTime = true;
                timeRemaining = STUDY_TIME;
                startButton.disabled = false;
                pauseButton.disabled = true;
                timerStatus.textContent = "준비";
                updateTimerDisplay();
                timerProgressCircle.style.background = `conic-gradient(#e74c3c 100%, transparent 100%)`;
            }

            function handleTimerEnd() {
                if (isStudyTime) {
                    const subject = subjectInput.value || '미지정 과목';
                    const now = new Date();
                    const day = WEEKDAYS[now.getDay()];
                    const time = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;

                    // Add to completed study blocks
                    if (!studyPlannerData.completedStudyBlocks[day]) {
                        studyPlannerData.completedStudyBlocks[day] = [];
                    }
                    studyPlannerData.completedStudyBlocks[day].push({ time: time, subject: subject });

                    studyPlannerData.completedSessions++;
                    studyPlannerData.studyRecords.push({ subject: subject, timestamp: now.toLocaleString() });

                    if (studyPlannerData.completedSessions % SESSIONS_PER_LONG_BREAK === 0) {
                        timeRemaining = LONG_BREAK;
                        isStudyTime = false;
                    } else {
                        timeRemaining = SHORT_BREAK;
                        isStudyTime = false;
                    }

                    updatePomodoroUI();
                    saveData();
                    alert(`뽀모도로 세션 완료! ${timeRemaining / 60}분 휴식 시작!`);
                    updateGeneratedPlannerUI(); // 플래너 업데이트
                } else {
                    timeRemaining = STUDY_TIME;
                    isStudyTime = true;
                    alert('휴식 시간 완료! 다시 공부를 시작하세요.');
                }

                startTimer();
                updateBadgesUI();
            }

            function updatePomodoroUI() {
                completedSessionsSpan.textContent = studyPlannerData.completedSessions;
                studyRecordsList.innerHTML = '';
                if (studyPlannerData.studyRecords.length > 0) {
                    studyPlannerData.studyRecords.forEach(record => {
                        const li = document.createElement('li');
                        li.innerHTML = `<span class="record-subject">${record.subject}</span><span class="record-time">${record.timestamp}</span>`;
                        studyRecordsList.appendChild(li);
                    });
                } else {
                    studyRecordsList.innerHTML = '<li class="no-records">아직 공부 기록이 없습니다!</li>';
                }
                resetTimer();
            }

            startButton.addEventListener('click', () => {
                if (!subjectInput.value.trim()) {
                    alert('공부할 과목을 입력해주세요.');
                    return;
                }
                startTimer();
            });
            pauseButton.addEventListener('click', pauseTimer);
            resetButton.addEventListener('click', resetTimer);

            // --- Planner Input Functions ---
            function addAcademySchedule() {
                const name = academyNameInput.value.trim();
                const day = academyDaySelect.value;
                const startTime = academyStartTimeInput.value;
                const endTime = academyEndTimeInput.value;

                if (!name || !startTime || !endTime) {
                    alert('학원 정보를 모두 입력해주세요.');
                    return;
                }
                studyPlannerData.academySchedules.push({ name, day, startTime, endTime });
                saveData();
                updatePlannerInputUI();
                academyNameInput.value = '';
            }

            function saveSleepTime() {
                const startTime = sleepStartTimeInput.value;
                const endTime = sleepEndTimeInput.value;
                if (!startTime || !endTime) {
                    alert('수면 시간을 모두 입력해주세요.');
                    return;
                }
                studyPlannerData.sleepTime = { startTime, endTime };
                saveData();
                updatePlannerInputUI();
            }

            function addStudyPlan() {
                const subject = studySubjectInput.value.trim();
                const hours = parseInt(studyWeeklyHoursInput.value, 10);
                if (!subject || hours <= 0 || isNaN(hours)) {
                    alert('유효한 과목명과 주간 목표 시간을 입력해주세요.');
                    return;
                }

                // Check if subject already exists
                const existingPlanIndex = studyPlannerData.studyPlans.findIndex(plan => plan.subject === subject);
                if (existingPlanIndex > -1) {
                    studyPlannerData.studyPlans[existingPlanIndex].hours = hours;
                } else {
                    studyPlannerData.studyPlans.push({ subject, hours });
                }

                saveData();
                updatePlannerInputUI();
                studySubjectInput.value = '';
                studyWeeklyHoursInput.value = '5';
            }

            function updatePlannerInputUI() {
                updateList(academyScheduleList, studyPlannerData.academySchedules, item =>
                    `<strong>${item.name}</strong> (${item.day} ${item.startTime}~${item.endTime})`,
                    (index) => {
                        studyPlannerData.academySchedules.splice(index, 1);
                        saveData();
                        updatePlannerInputUI();
                    }
                );

                updateList(studyPlanList, studyPlannerData.studyPlans, item =>
                    `<strong>${item.subject}</strong> (${item.hours}시간/주)`,
                    (index) => {
                        studyPlannerData.studyPlans.splice(index, 1);
                        saveData();
                        updatePlannerInputUI();
                    }
                );

                if (studyPlannerData.sleepTime) {
                    displaySleepTimeList.innerHTML = '';
                    const li = document.createElement('li');
                    li.innerHTML = `<strong>취침 시간:</strong> ${studyPlannerData.sleepTime.startTime}, <strong>기상 시간:</strong> ${studyPlannerData.sleepTime.endTime}
                        <button class="list-delete-btn" data-index="0"><i class="fas fa-times"></i></button>`;
                    displaySleepTimeList.appendChild(li);

                    li.querySelector('.list-delete-btn').addEventListener('click', () => {
                        studyPlannerData.sleepTime = null;
                        saveData();
                        updatePlannerInputUI();
                    });
                } else {
                    displaySleepTimeList.innerHTML = '<li class="no-items">설정된 수면 시간이 없습니다.</li>';
                }
            }

            function updateList(listElement, dataArray, formatCallback, deleteCallback) {
                listElement.innerHTML = '';
                if (dataArray.length === 0) {
                    listElement.innerHTML = `<li class="no-items">등록된 항목이 없습니다.</li>`;
                    return;
                }
                dataArray.forEach((item, index) => {
                    const li = document.createElement('li');
                    const formattedContent = formatCallback(item);
                    li.innerHTML = `<div class="list-item-content">${formattedContent}</div><button class="list-delete-btn" data-index="${index}"><i class="fas fa-times"></i></button>`;
                    listElement.appendChild(li);
                });

                listElement.querySelectorAll('.list-delete-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const index = e.target.closest('button').dataset.index;
                        deleteCallback(index);
                    });
                });
            }

            addAcademyScheduleBtn.addEventListener('click', addAcademySchedule);
            saveSleepTimeBtn.addEventListener('click', saveSleepTime);
            addStudyPlanBtn.addEventListener('click', addStudyPlan);

            generatePlannerButton.addEventListener('click', () => {
                showSection('generatedPlannerSection', btnGeneratedPlanner);
            });

            // --- AI Planner Generation Functions ---
            function updateGeneratedPlannerUI() {
                updateList(displayAcademyScheduleList, studyPlannerData.academySchedules, item =>
                    `<strong>${item.name}</strong> (${item.day} ${item.startTime}~${item.endTime})`
                );
                updateList(displayStudyPlanList, studyPlannerData.studyPlans, item =>
                    `<strong>${item.subject}</strong> (${item.hours}시간/주)`
                );

                if (studyPlannerData.academySchedules.length > 0 || studyPlannerData.sleepTime || studyPlannerData.studyPlans.length > 0) {
                    noAiPlannerData.style.display = 'none';
                    generateAIPlanner();
                    const learningRate = calculateDailyLearningRate();
                    dailyLearningRateSpan.textContent = `${learningRate}%`;
                } else {
                    noAiPlannerData.style.display = 'block';
                    aiPlannerTableBody.innerHTML = '';
                    dailyLearningRateSpan.textContent = '0%';
                }
            }

            function parseTime(timeStr) {
                const [hours, minutes] = timeStr.split(':').map(Number);
                return hours * 60 + minutes;
            }

            function formatTime(minutes) {
                const hours = Math.floor(minutes / 60);
                const mins = minutes % 60;
                return `${String(hours).padStart(2, '0')}:${String(mins).padStart(2, '0')}`;
            }

            function calculateDailyLearningRate() {
                const now = new Date();
                const today = WEEKDAYS[now.getDay()];

                const totalPlannedPomodoros = Object.values(studyPlannerData.aiPlanner)
                                                    .flatMap(daySchedule => daySchedule)
                                                    .filter(block => block.type === 'study' && block.day === today)
                                                    .length;

                const completedPomodoros = studyPlannerData.completedStudyBlocks[today] ? studyPlannerData.completedStudyBlocks[today].length : 0;

                if (totalPlannedPomodoros === 0) return 0;

                const learningRate = (completedPomodoros / totalPlannedPomodoros) * 100;
                return Math.min(learningRate, 100).toFixed(0);
            }

            function checkAndAwardBadges() {
                const now = new Date();
                const today = now.toISOString().split('T')[0];
                const lastBadgeDate = studyPlannerData.lastBadgeDate;

                if (lastBadgeDate === today) {
                    // Already checked today
                    return;
                }

                // Check yesterday's date
                const yesterday = new Date(now);
                yesterday.setDate(now.getDate() - 1);
                const yesterdayDay = WEEKDAYS[yesterday.getDay()];
                const yesterdayString = yesterday.toISOString().split('T')[0];

                if (lastBadgeDate && lastBadgeDate !== yesterdayString) {
                    // Reset completed blocks if it's a new day and lastBadgeDate is not yesterday
                    studyPlannerData.completedStudyBlocks = { '월': [], '화': [], '수': [], '목': [], '금': [], '토': [], '일': [] };
                }


                const totalPlannedPomodoros = Object.values(studyPlannerData.aiPlanner)
                                                    .flatMap(daySchedule => daySchedule)
                                                    .filter(block => block.type === 'study' && block.day === yesterdayDay)
                                                    .length;
                const completedPomodoros = studyPlannerData.completedStudyBlocks[yesterdayDay] ? studyPlannerData.completedStudyBlocks[yesterdayDay].length : 0;

                if (totalPlannedPomodoros > 0) {
                    const yesterdayLearningRate = (completedPomodoros / totalPlannedPomodoros) * 100;
                    if (yesterdayLearningRate >= 100) {
                        studyPlannerData.badges += 3;
                        alert(`전날 공부 목표 100% 달성! 배지 3개를 획득했습니다! 🎉`);
                    } else if (yesterdayLearningRate >= 80) {
                        studyPlannerData.badges += 1;
                        alert(`전날 공부 목표 80% 달성! 배지 1개를 획득했습니다! 👏`);
                    }
                }

                studyPlannerData.lastBadgeDate = today;
                saveData();
                updateBadgesUI();
            }

            function generateAIPlanner() {
                const plannerTableBody = aiPlannerTableBody;
                plannerTableBody.innerHTML = '';

                const hourlySchedule = {};
                for (let i = 0; i < 24 * 60; i += 30) {
                    const timeStr = formatTime(i);
                    hourlySchedule[timeStr] = Array(7).fill({ type: 'empty' });
                }

                // Check for warnings
                let totalAcademyHours = 0;
                studyPlannerData.academySchedules.forEach(schedule => {
                    const start = parseTime(schedule.startTime);
                    const end = parseTime(schedule.endTime);
                    const duration = (end > start) ? end - start : (end + 24 * 60) - start;
                    totalAcademyHours += duration / 60;
                });

                const academyWarningThreshold = (studyPlannerData.userLevel === '중학생') ? 20 : 25;
                if (totalAcademyHours > academyWarningThreshold) {
                    academyWarning.textContent = `경고: 주간 학원 시간이 ${totalAcademyHours.toFixed(1)}시간으로 너무 많습니다. 개인 공부 시간을 확보하세요.`;
                    academyWarning.style.display = 'block';
                } else {
                    academyWarning.style.display = 'none';
                }

                // Add sleep time
                if (studyPlannerData.sleepTime) {
                    const sleepStart = parseTime(studyPlannerData.sleepTime.startTime);
                    const sleepEnd = parseTime(studyPlannerData.sleepTime.endTime);
                    const days = WEEKDAYS;

                    for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
                        if (sleepStart > sleepEnd) { // Overnight sleep
                            for (let time = sleepStart; time < 24 * 60; time += 30) {
                                const timeStr = formatTime(time);
                                if (hourlySchedule[timeStr]) hourlySchedule[timeStr][dayIndex] = { type: 'sleep' };
                            }
                            for (let time = 0; time < sleepEnd; time += 30) {
                                const timeStr = formatTime(time);
                                if (hourlySchedule[timeStr]) hourlySchedule[timeStr][dayIndex] = { type: 'sleep' };
                            }
                        } else { // Daytime sleep
                            for (let time = sleepStart; time < sleepEnd; time += 30) {
                                const timeStr = formatTime(time);
                                if (hourlySchedule[timeStr]) hourlySchedule[timeStr][dayIndex] = { type: 'sleep' };
                            }
                        }
                    }
                }

                // Add academy schedules
                studyPlannerData.academySchedules.forEach(schedule => {
                    const dayIndex = WEEKDAYS.indexOf(schedule.day);
                    if (dayIndex === -1) return; // 요일 정보가 없으면 건너뜁니다.
                    const start = parseTime(schedule.startTime);
                    const end = parseTime(schedule.endTime);

                    for (let time = start; time < end; time += 30) {
                        const timeStr = formatTime(time);
                        if (hourlySchedule[timeStr]) hourlySchedule[timeStr][dayIndex] = { type: 'academy', name: schedule.name };
                    }
                });

                // Add meals and other fixed times (simplified)
                const mealTimes = [
                    [parseTime('07:00'), parseTime('08:00')],
                    [parseTime('12:00'), parseTime('13:00')],
                    [parseTime('18:00'), parseTime('19:00')]
                ];
                for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
                    mealTimes.forEach(([start, end]) => {
                        for (let time = start; time < end; time += 30) {
                            const timeStr = formatTime(time);
                            if (hourlySchedule[timeStr] && hourlySchedule[timeStr][dayIndex].type === 'empty') {
                                hourlySchedule[timeStr][dayIndex] = { type: 'meal' };
                            }
                        }
                    });
                }

                // Add pomodoro study blocks for individual subjects
                const studySubjects = studyPlannerData.studyPlans;
                const totalStudyHours = studySubjects.reduce((sum, plan) => sum + plan.hours, 0);
                const totalPomodoros = totalStudyHours * (60 / 25);
                const pomodorosPerSubject = studySubjects.map(plan => ({
                    subject: plan.subject,
                    count: Math.round(plan.hours / totalStudyHours * totalPomodoros)
                }));
                const studyColorMap = studySubjects.reduce((acc, plan, index) => {
                    acc[plan.subject] = `study-color-${index % 8}`;
                    return acc;
                }, {});

                // Initialize AI planner data structure for rendering
                studyPlannerData.aiPlanner = {};
                WEEKDAYS.forEach(day => studyPlannerData.aiPlanner[day] = []);

                let pomodorosRemaining = totalPomodoros;
                const totalEmptySlots = Object.values(hourlySchedule).flatMap(day => day).filter(slot => slot.type === 'empty').length;
                const pomodoroUnit = 2; // 30분 단위 셀 2개가 1 뽀모도로 세션 (25분 공부 + 5분 휴식)
                const totalAvailablePomodoros = Math.floor(totalEmptySlots / pomodoroUnit);

                let dailyPomodoroAssignments = WEEKDAYS.reduce((acc, day) => {
                    acc[day] = [];
                    return acc;
                }, {});

                // 첫 번째 패스: 주간 공부 분량을 요일별로 균등하게 배분
                for(let i = 0; i < totalAvailablePomodoros; i++) {
                    const day = WEEKDAYS[i % 7];
                    const availableSubjects = pomodorosPerSubject.filter(p => p.count > 0);
                    if (availableSubjects.length > 0) {
                        const subject = availableSubjects[i % availableSubjects.length];
                        dailyPomodoroAssignments[day].push(subject.subject);
                        subject.count--;
                    }
                }

                // 두 번째 패스: 실제 테이블에 할당
                for (let time = 0; time < 24 * 60; time += 30) {
                    const timeStr = formatTime(time);
                    WEEKDAYS.forEach((day, dayIndex) => {
                        if (hourlySchedule[timeStr] && hourlySchedule[timeStr][dayIndex].type === 'empty') {
                            const pomodoroSubject = dailyPomodoroAssignments[day].shift();
                            if (pomodoroSubject) {
                                hourlySchedule[timeStr][dayIndex] = { type: 'study', subject: pomodoroSubject, class: studyColorMap[pomodoroSubject], day: day };
                                studyPlannerData.aiPlanner[day].push({ type: 'study', time: timeStr });
                                if (time + 30 < 24 * 60) {
                                    const breakTimeStr = formatTime(time + 30);
                                    if (hourlySchedule[breakTimeStr] && hourlySchedule[breakTimeStr][dayIndex].type === 'empty') {
                                        hourlySchedule[breakTimeStr][dayIndex] = { type: 'break', day: day };
                                    }
                                }
                            }
                        }
                    });
                }


                saveData(); // Save the generated planner to storage

                // Render table
                const timeIntervals = Object.keys(hourlySchedule);
                timeIntervals.forEach(time => {
                    const row = document.createElement('tr');
                    const timeLabel = document.createElement('td');
                    timeLabel.textContent = time;
                    timeLabel.classList.add('time-label');
                    row.appendChild(timeLabel);

                    WEEKDAYS.forEach((day, dayIndex) => {
                        const cell = document.createElement('td');
                        const schedule = hourlySchedule[time][dayIndex];
                        const completedBlocksForDay = studyPlannerData.completedStudyBlocks[day] || [];
                        const isCompleted = completedBlocksForDay.some(block => {
                            const [completedHour, completedMinute] = block.time.split(':').map(Number);
                            const completedTotalMinutes = completedHour * 60 + completedMinute;
                            const [cellHour, cellMinute] = time.split(':').map(Number);
                            const cellTotalMinutes = cellHour * 60 + cellMinute;

                            return completedTotalMinutes >= cellTotalMinutes && completedTotalMinutes < cellTotalMinutes + 30;
                        });

                        if (schedule.type === 'sleep') {
                            cell.classList.add('sleep-time');
                            cell.textContent = '수면';
                        } else if (schedule.type === 'academy') {
                            cell.classList.add('academy-time');
                            cell.textContent = schedule.name;
                        } else if (schedule.type === 'meal') {
                            cell.classList.add('meal-time');
                            cell.textContent = '식사';
                        } else if (schedule.type === 'study') {
                            cell.classList.add(schedule.class);
                            cell.textContent = schedule.subject;
                            if (isCompleted) {
                                cell.classList.add('study-completed');
                            }
                        } else if (schedule.type === 'break') {
                            cell.classList.add('pomodoro-break');
                            cell.textContent = '휴식';
                        }

                        row.appendChild(cell);
                    });
                    plannerTableBody.appendChild(row);
                });
            }

            // --- Badges & Recommendations ---
            function updateBadgesUI() {
                badgeDisplay.textContent = `${studyPlannerData.badges}개`;
                currentBadgesSpan.textContent = studyPlannerData.badges;
                if (studyPlannerData.badges >= 5) {
                    redeemButton.disabled = false;
                } else {
                    redeemButton.disabled = true;
                }
            }

            redeemButton.addEventListener('click', () => {
                if (studyPlannerData.badges >= 5) {
                    studyPlannerData.badges -= 5;
                    redeemMessage.textContent = '상품으로 교환되었습니다! 👏';
                    saveData();
                    updateBadgesUI();
                } else {
                    redeemMessage.textContent = '배지가 부족합니다. 😢';
                }
            });


            // New Recommendation Functions
            function updateRecommendationUI() {
                renderGradeOptions();
                renderSubjectOptions();
            }

            studentTypeRadioGroup.addEventListener('change', () => {
                renderGradeOptions();
                renderSubjectOptions();
            });

            function renderGradeOptions() {
                const studentType = document.querySelector('input[name="studentType"]:checked').value;
                gradeSelect.innerHTML = '';
                let grades = [];
                if (studentType === 'middleSchool') {
                    grades = ['1학년', '2학년', '3학년'];
                } else { // highSchool
                    grades = ['1학년', '2학년', '3학년'];
                }
                grades.forEach(grade => {
                    const option = document.createElement('option');
                    option.value = grade;
                    option.textContent = grade;
                    gradeSelect.appendChild(option);
                });
            }

            function renderSubjectOptions() {
                const studentType = document.querySelector('input[name="studentType"]:checked').value;
                weakSubjectSelect.innerHTML = '';
                let subjects = [];
                if (studentType === 'middleSchool') {
                    subjects = ['국어', '수학', '영어', '과학', '사회/역사'];
                } else { // highSchool
                    subjects = ['국어', '수학', '영어', '과학탐구', '사회탐구'];
                }
                subjects.forEach(subject => {
                    const option = document.createElement('option');
                    option.value = subject;
                    option.textContent = subject;
                    weakSubjectSelect.appendChild(option);
                });
            }

            function generateWorkbooks() {
                const studentType = document.querySelector('input[name="studentType"]:checked').value;
                const grade = gradeSelect.value;
                const weakSubject = weakSubjectSelect.value;
                const weaknessLevel = document.querySelector('input[name="weaknessLevel"]:checked').value;

                if (!grade || !weakSubject || !weaknessLevel) {
                    alert('모든 항목을 선택해주세요.');
                    return;
                }

                // Save user preferences
                studyPlannerData.userLevel = (studentType === 'middleSchool') ? '중학생' : '고등학생';
                studyPlannerData.userGrade = grade;
                studyPlannerData.weakSubject = weakSubject;
                studyPlannerData.weaknessLevel = weaknessLevel;
                saveData();

                let recommendationKey = (studentType === 'middleSchool') ? "중학교" : "고등학교";
                let recommendations = defaultWorkbooks[recommendationKey][weakSubject][weaknessLevel];

                recommendedWorkbooksList.innerHTML = '';
                recommendations.forEach(workbook => {
                    const li = document.createElement('li');
                    li.innerHTML = `<strong>${workbook}</strong>`;
                    recommendedWorkbooksList.appendChild(li);
                });

                recommendationResultsDiv.style.display = 'block';
            }

            generateRecommendationBtn.addEventListener('click', generateWorkbooks);

            // Initial call
            loadData();
        });
    </script>
</body>
</html>
